

# openapi: 3.0.0
# info:
#   title: Hospital and Hospital Group API
#   version: 1.0.0
#   description: API documentation for Hospital and Hospital Group operations
# servers:
#   - url: http://localhost:3000

# components:
#   securitySchemes:
#     BearerAuth:
#       type: http
#       scheme: bearer
#       bearerFormat: JWT
#   schemas:
#     Error:
#       type: object
#       properties:
#         meta:
#           $ref: '#/components/schemas/Meta'
#         error:
#           type: object
#           properties:
#             message:
#               type: string
#     Meta:
#       type: object
#       properties:
#         statusCode:
#           type: integer
#         errorCode:
#           type: integer
#     HospitalGroup:
#       type: object
#       properties:
#         id:
#           type: integer
#         HospitalGroupName:
#           type: string
#         LicensedHospitalCount:
#           type: integer
#     Hospital:
#       type: object
#       properties:
#         HospitalID:
#           type: integer
#         HospitalName:
#           type: string
#         HospitalCode:
#           type: string
#         ManagingCompany:
#           type: string
#         ManagingCompanyAdd1:
#           type: string
#         ManagingCompanyAdd2:
#           type: string
#         ManagingCompanyAdd3:
#           type: string
#         ManagingCompanyEmail:
#           type: string
#         ManagingCompanyWebsite:
#           type: string
#         City:
#           type: string
#         Province:
#           type: string
#         Region:
#           type: string
#         Country:
#           type: string
#         HospitalOwner:
#           type: string
#         OwnerName:
#           type: string
#         OwnerAdd1:
#           type: string
#         OwnerAdd2:
#           type: string
#         OwnerAdd3:
#           type: string
#         OwnerCity:
#           type: string
#         OwnerProvince:
#           type: string
#         OwnerRegion:
#           type: string
#         OwnerCountry:
#           type: string
#         OwnerEmail:
#           type: string
#         HospitalIDNo:
#           type: string
#         TaxNumber:
#           type: string
#         ServiceNo:
#           type: string
#         RegistrationNo:
#           type: string
#         VATNumber:
#           type: string
#         GSTNo:
#           type: string
#         TINNo:
#           type: string
#         AccBooksBeginFrom:
#           type: string
#           format: date
#         OtherRegNo:
#           type: string
#         HospitalLogo:
#           type: string
#         HospitalGroupIDR:
#           type: integer
#     HospitalInput:
#       type: object
#       properties:
#         HospitalName:
#           type: string
#         HospitalCode:
#           type: string
#         ManagingCompany:
#           type: string
#         ManagingCompanyAdd1:
#           type: string
#         ManagingCompanyAdd2:
#           type: string
#         ManagingCompanyAdd3:
#           type: string
#         ManagingCompanyEmail:
#           type: string
#         ManagingCompanyWebsite:
#           type: string
#         City:
#           type: string
#         Province:
#           type: string
#         Region:
#           type: string
#         Country:
#           type: string
#         HospitalOwner:
#           type: string
#         OwnerName:
#           type: string
#         OwnerAdd1:
#           type: string
#         OwnerAdd2:
#           type: string
#         OwnerAdd3:
#           type: string
#         OwnerCity:
#           type: string
#         OwnerProvince:
#           type: string
#         OwnerRegion:
#           type: string
#         OwnerCountry:
#           type: string
#         OwnerEmail:
#           type: string
#         HospitalIDNo:
#           type: string
#         TaxNumber:
#           type: string
#         ServiceNo:
#           type: string
#         RegistrationNo:
#           type: string
#         VATNumber:
#           type: string
#         GSTNo:
#           type: string
#         TINNo:
#           type: string
#         AccBooksBeginFrom:
#           type: string
#           format: date
#         OtherRegNo:
#           type: string
#         HospitalLogo:
#           type: string
#         HospitalGroupIDR:
#           type: integer

#         security:
#           - BearerAuth: []

# paths:
#   /api/v1/hospital/admin/login:
#     post:
#       summary: Authenticate user
#       tags:
#         - Authentication
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 SysUserName:
#                   type: string
#                 SysUserPwd:
#                   type: string
#               required:
#                 - SysUserName
#                 - SysUserPwd
#       responses:
#         '200':
#           description: Successful login
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   token:
#                     type: string
#         '400':
#           description: Invalid username or password
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'

#   /api/v1/hospital/hospital-groups:
#     post:
#       summary: Create a new hospital group
#       tags:
#         - Hospital Groups
#       security:
#         - BearerAuth: []
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 HospitalGroupName:
#                   type: string
#                 LicensedHospitalCount:
#                   type: integer
#               required:
#                 - HospitalGroupName
#                 - LicensedHospitalCount
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/HospitalGroup'
#         '400':
#           description: Bad Request
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     get:
#       summary: Get all hospital groups
#       tags:
#         - Hospital Groups
        
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/HospitalGroup'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'

#   /api/v1/hospital/hospital-groups/{id}:
#     get:
#       summary: Get a hospital group by ID
#       tags:
#         - Hospital Groups
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital group to retrieve
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/HospitalGroup'
#         '404':
#           description: Hospital group not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     put:
#       summary: Update a hospital group by ID
#       tags:
#         - Hospital Groups
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital group to update
#           schema:
#             type: integer
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/HospitalGroup'
#       responses:
#         '200':
#           description: Hospital group updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     $ref: '#/components/schemas/Meta'
#                   message:
#                     type: string
#         '404':
#           description: Hospital group not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     delete:
#       summary: Delete a hospital group by ID
#       tags:
#         - Hospital Groups
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital group to delete
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Hospital group deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     $ref: '#/components/schemas/Meta'
#                   message:
#                     type: string
#         '404':
#           description: Hospital group not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Internal Server Error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'

#   /api/v1/hospital/hospital:
#     post:
#       summary: Create a new hospital
#       tags:
#         - Hospitals
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/HospitalInput'
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Hospital'
#         '400':
#           description: Invalid data provided
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     get:
#       summary: Get all hospitals
#       tags:
#         - Hospitals
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Hospital'
#         '500':
#           description: Error retrieving hospitals
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#   /api/v1/hospital/hospital/{id}:
#     get:
#       summary: Get a hospital by ID
#       tags:
#         - Hospitals
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital to retrieve
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Hospital'
#         '404':
#           description: Hospital not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Error retrieving hospital
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     put:
#       summary: Update a hospital by ID
#       tags:
#         - Hospitals
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital to update
#           schema:
#             type: integer
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/HospitalInput'
#       responses:
#         '200':
#           description: Hospital updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     $ref: '#/components/schemas/Meta'
#                   message:
#                     type: string
#         '400':
#           description: Invalid data provided
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '404':
#           description: Hospital not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Error updating hospital
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#     delete:
#       summary: Delete a hospital by ID
#       tags:
#         - Hospitals
#       parameters:
#         - in: path
#           name: id
#           required: true
#           description: ID of the hospital to delete
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Hospital deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     $ref: '#/components/schemas/Meta'
#                   message:
#                     type: string
#         '404':
#           description: Hospital not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
#         '500':
#           description: Error deleting hospital
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Error'
# components:
#   schemas:
#     HospitalGroup:
#       type: object
#       properties:
#         HospitalGroupID:
#           type: integer
#         HospitalGroupName:
#           type: string
#         LicensedHospitalCount:
#           type: integer
#         CreatedDate:
#           type: string
#           format: date
#         CreatedBy:
#           type: integer
#     Hospital:
#       type: object
#       properties:
#         HospitalID:
#           type: integer
#         HospitalName:
#           type: string
#         HospitalCode:
#           type: string
#         ManagingCompany:
#           type: string
#         ManagingCompanyAdd1:
#           type: string
#         ManagingCompanyAdd2:
#           type: string
#         ManagingCompanyAdd3:
#           type: string
#         ManagingCompanyEmail:
#           type: string
#         ManagingCompanyWebsite:
#           type: string
#         City:
#           type: string
#         Province:
#           type: string
#         Region:
#           type: string
#         Country:
#           type: string
#         HospitalOwner:
#           type: string
#         OwnerName:
#           type: string
#         OwnerAdd1:
#           type: string
#         OwnerAdd2:
#           type: string
#         OwnerAdd3:
#           type: string
#         OwnerCity:
#           type: string
#         OwnerProvince:
#           type: string
#         OwnerRegion:
#           type: string
#         OwnerCountry:
#           type: string
#         OwnerEmail:
#           type: string
#         HospitalIDNo:
#           type: string
#         TaxNumber:
#           type: string
#         ServiceNo:
#           type: string
#         RegistrationNo:
#           type: string
#         VATNumber:
#           type: string
#         GSTNo:
#           type: string
#         TINNo:
#           type: string
#         AccBooksBeginFrom:
#           type: string
#           format: date
#         OtherRegNo:
#           type: string
#         HospitalLogo:
#           type: string
#         HospitalGroupIDR:
#           type: integer
#           HospitalLogo:
#           type: string
#     HospitalInput:
#       type: object
#       properties:
#         HospitalName:
#           type: string
#         HospitalCode:
#           type: string
#         ManagingCompany:
#           type: string
#         ManagingCompanyAdd1:
#           type: string
#         ManagingCompanyAdd2:
#           type: string
#         ManagingCompanyAdd3:
#           type: string
#         ManagingCompanyEmail:
#           type: string
#         ManagingCompanyWebsite:
#           type: string
#         City:
#           type: string
#         Province:
#           type: string
#         Region:
#           type: string
#         Country:
#           type: string
#         HospitalOwner:
#           type: string
#         OwnerName:
#           type: string
#         OwnerAdd1:
#           type: string
#         OwnerAdd2:
#           type: string
#         OwnerAdd3:
#           type: string
#         OwnerCity:
#           type: string
#         OwnerProvince:
#           type: string
#         OwnerRegion:
#           type: string
#         OwnerCountry:
#           type: string
#         OwnerEmail:
#           type: string
#         HospitalIDNo:
#           type: string
#         TaxNumber:
#           type: string
#         ServiceNo:
#           type: string
#         RegistrationNo:
#           type: string
#         VATNumber:
#           type: string
#         GSTNo:
#           type: string
#         TINNo:
#           type: string
#         AccBooksBeginFrom:
#           type: string
#           format: date
#         OtherRegNo:
#           type: string
#         HospitalLogo:
#           type: string
#         HospitalGroupIDR:
#           type: integer
#           HospitalDatabase:
#           type: string
#     Meta:
#       type: object
#       properties:
#         statusCode:
#           type: integer
#     Error:
#       type: object
#       properties:
#         meta:
#           $ref: '#/components/schemas/Meta'
#         error:
#           type: object
#           properties:
#             message:
#               type: string

# paths:
#   /api/v1/hospital/user:
#     post:
#       summary: Create a new user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 databaseName:
#                   type: string
#                   description: Name of the dynamic database
#                 userName:
#                   type: string
#                   description: Username for the new user
#                 password:
#                   type: string
#                   description: Password for the new user
#                 hospitalGroupId:
#                   type: integer
#                   description: ID of the hospital group the user belongs to
#       responses:
#         '201':
#           description: User created successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     type: object
#                     properties:
#                       statusCode:
#                         type: integer
#                   data:
#                     $ref: '#/components/schemas/User'
#         '400':
#           description: Error creating user
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

#     put:
#       summary: Update an existing user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 databaseName:
#                   type: string
#                   description: Name of the dynamic database
#                 userId:
#                   type: integer
#                   description: ID of the user to update
#                 userName:
#                   type: string
#                   description: Updated username
#                 password:
#                   type: string
#                   description: Updated password
#                 hospitalGroupId:
#                   type: integer
#                   description: Updated hospital group ID
#       responses:
#         '200':
#           description: User updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     type: object
#                     properties:
#                       statusCode:
#                         type: integer
#                   data:
#                     $ref: '#/components/schemas/User'
#         '400':
#           description: Error updating user
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: User not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

#     delete:
#       summary: Delete a user
#       parameters:
#         - name: databaseName
#           in: query
#           required: true
#           schema:
#             type: string
#           description: Name of the dynamic database
#         - name: userId
#           in: query
#           required: true
#           schema:
#             type: integer
#           description: ID of the user to delete
#       responses:
#         '200':
#           description: User deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     type: object
#                     properties:
#                       statusCode:
#                         type: integer
#                   data:
#                     type: object
#                     properties:
#                       message:
#                         type: string
#         '400':
#           description: Error deleting user
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: User not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

#   /users:
#     get:
#       summary: Get all users
#       parameters:
#         - name: databaseName
#           in: query
#           required: true
#           schema:
#             type: string
#           description: Name of the dynamic database
#       responses:
#         '200':
#           description: List of users
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   meta:
#                     type: object
#                     properties:
#                       statusCode:
#                         type: integer
#                   data:
#                     type: array
#                     items:
#                       $ref: '#/components/schemas/User'
#         '400':
#           description: Error retrieving users
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         UserID:
#           type: integer
#         UserName:
#           type: string
#         Password:
#           type: string
#         HospitalGroupID:
#           type: integer

#     ErrorResponse:
#       type: object
#       properties:
#         meta:
#           type: object
#           properties:
#             statusCode:
#               type: integer
#             errorCode:
#               type: integer
#         error:
#           type: object
#           properties:
#             message:
#               type: string









openapi: 3.0.0
info:
  title: Hospital and Hospital Group API
  version: 1.0.0
  description: API documentation for Hospital and Hospital Group operations
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        error:
          type: object
          properties:
            message:
              type: string
    Meta:
      type: object
      properties:
        statusCode:
          type: integer
        errorCode:
          type: integer
    HospitalGroup:
      type: object
      properties:
        id:
          type: integer
        hospitalGroupName:
          type: string
        licensedHospitalCount:
          type: integer
    Hospital:
      type: object
      properties:
        hospitalID:
          type: integer
        hospitalName:
          type: string
        hospitalCode:
          type: string
        managingCompany:
          type: string
        managingCompanyAdd1:
          type: string
        managingCompanyAdd2:
          type: string
        managingCompanyAdd3:
          type: string
        managingCompanyEmail:
          type: string
        managingCompanyWebsite:
          type: string
        city:
          type: string
        province:
          type: string
        region:
          type: string
        country:
          type: string
        hospitalOwner:
          type: string
        ownerName:
          type: string
        ownerAdd1:
          type: string
        ownerAdd2:
          type: string
        ownerAdd3:
          type: string
        ownerCity:
          type: string
        ownerProvince:
          type: string
        ownerRegion:
          type: string
        ownerCountry:
          type: string
        ownerEmail:
          type: string
        hospitalIDNo:
          type: string
        taxNumber:
          type: string
        serviceNo:
          type: string
        registrationNo:
          type: string
        VATNumber:
          type: string
        GSTNo:
          type: string
        TINNo:
          type: string
        accBooksBeginFrom:
          type: string
          format: date
        otherRegNo:
          type: string
        hospitalLogo:
          type: string
        hospitalGroupIDR:
          type: integer
    HospitalInput:
      type: object
      properties:
        hospitalName:
          type: string
        hospitalCode:
          type: string
        managingCompany:
          type: string
        managingCompanyAdd1:
          type: string
        managingCompanyAdd2:
          type: string
        managingCompanyAdd3:
          type: string
        managingCompanyEmail:
          type: string
        managingCompanyWebsite:
          type: string
        city:
          type: string
        province:
          type: string
        region:
          type: string
        country:
          type: string
        hospitalOwner:
          type: string
        ownerName:
          type: string
        ownerAdd1:
          type: string
        ownerAdd2:
          type: string
        ownerAdd3:
          type: string
        ownerCity:
          type: string
        ownerProvince:
          type: string
        ownerRegion:
          type: string
        ownerCountry:
          type: string
        ownerEmail:
          type: string
        hospitalIDNo:
          type: string
        taxNumber:
          type: string
        serviceNo:
          type: string
        registrationNo:
          type: string
        VATNumber:
          type: string
        GSTNo:
          type: string
        TINNo:
          type: string
        accBooksBeginFrom:
          type: string
          format: date
        otherRegNo:
          type: string
        hospitalLogo:
          type: string
        hospitalGroupIDR:
          type: integer

paths:
  /api/v1/hospital/admin/login:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SysUserName:
                  type: string
                SysUserPwd:
                  type: string
              required:
                - SysUserName
                - SysUserPwd
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hospital/hospital-groups:
    post:
      summary: Create a new hospital group
      tags:
        - Hospital Groups
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HospitalGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all hospital groups
      tags:
        - Hospital Groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HospitalGroup'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hospital/hospital-groups/{id}:
    get:
      summary: Get a hospital group by ID
      tags:
        - Hospital Groups
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the hospital group to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HospitalGroup'
        '404':
          description: Hospital group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a hospital group by ID
      tags:
        - Hospital Groups
      parameters:
        - in: path
        - name: id
          required: true
          description: ID of the hospital group to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalGroup'
      responses:
        '200':
          description: Hospital group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '404':
          description: Hospital group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a hospital group by ID
      tags:
        - Hospital Groups
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the hospital group to delete
          schema:
            type: integer
      responses:
        '200':
          description: Hospital group deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '404':
          description: Hospital group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hospital/hospital:
    post:
      summary: Create a new hospital
      tags:
        - Hospitals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospital'
        '400':
          description: Invalid data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all hospitals
      tags:
        - Hospitals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hospital'
        '500':
          description: Error retrieving hospitals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /api/v1/hospital/hospital/group/:HospitalGroupIDR:
    get:
      summary: Get a hospital by ID
      tags:
        - Hospitals
      parameters:
        - in: path
          name: HospitalGroupIDR
          required: true
          description: HospitalGroupID of the hospital to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospital'
        '404':
          description: Hospital not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error retrieving hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/hospital/hospital/{id}:
    get:
      summary: Get a hospital by ID
      tags:
        - Hospitals
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the hospital to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospital'
        '404':
          description: Hospital not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error retrieving hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a hospital by ID
      tags:
        - Hospitals
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the hospital to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalInput'
      responses:
        '200':
          description: Hospital updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '400':
          description: Invalid data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hospital not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error updating hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a hospital by ID
      tags:
        - Hospitals
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the hospital to delete
          schema:
            type: integer
      responses:
        '200':
          description: Hospital deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '404':
          description: Hospital not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error deleting hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hospital/user:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # databaseName:
                #   type: string
                #   description: Name of the dynamic database
                userName:
                  type: string
                  description: Username for the new user
                password:
                  type: string
                  description: Password for the new user
                hospitalGroupId:
                  type: integer
                  description: ID of the hospital group the user belongs to
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      statusCode:
                        type: integer
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error creating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                databaseName:
                  type: string
                  description: Name of the dynamic database
                userId:
                  type: integer
                  description: ID of the user to update
                userName:
                  type: string
                  description: Updated username
                password:
                  type: string
                  description: Updated password
                hospitalGroupId:
                  type: integer
                  description: Updated hospital group ID
      responses:
        '200':
          description: User
                  '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '400':
          description: Error updating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            description: ID of the user to delete
          required: true
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '400':
          description: Error deleting user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hospital/user/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error retrieving user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '400':
          description: Error updating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error updating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  message:
                    type: string
        '400':
          description: Error deleting user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



        
         


















